package main

import (
	"fmt"
	"os"
	"testing"
	"yacco/buf"
)

var pgmGo = []rune(`
	/* a comment
	*/
	// a comment
	"a string\"blah"
	'c' '\''
	nothing
`)

var pgmGoC = []uint16{
	0x0001, 0x0001, 0x0073, 0x0063, 0x0063, 0x0063, 0x0063, 0x0063, 0x0063, 0x0063,
	0x0063, 0x0063, 0x0063, 0x0063, 0x0063, 0x0063, 0x0083, 0x0003, 0x0001, 0x0001,
	0x0073, 0x0093, 0x0093, 0x0093, 0x0093, 0x0093, 0x0093, 0x0093, 0x0093, 0x0093,
	0x0093, 0x0093, 0x0003, 0x0001, 0x0022, 0x0022, 0x0022, 0x0022, 0x0022, 0x0022,
	0x0022, 0x0022, 0x0022, 0x0032, 0x0022, 0x0022, 0x0022, 0x0022, 0x0022, 0x0002,
	0x0001, 0x0001, 0x0042, 0x0042, 0x0002, 0x0001, 0x0042, 0x0052, 0x0042, 0x0002,
	0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,
}

var pgmPy = []rune(`
	"""long string " long string"""
	"string \" string"
	'string\' string'
	# comment comment
`)

var pgmPyC = []uint16{
	0x0001, 0x0001, 0x0022, 0x0032, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012,
	0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0042, 0x0012, 0x0012,
	0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012, 0x0012,
	0x0042, 0x0052, 0x0002, 0x0001, 0x0001, 0x0021, 0x0072, 0x0072, 0x0072, 0x0072,
	0x0072, 0x0072, 0x0072, 0x0082, 0x0072, 0x0072, 0x0072, 0x0072, 0x0072, 0x0072,
	0x0072, 0x0072, 0x0002, 0x0001, 0x0001, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092,
	0x0092, 0x0092, 0x00a2, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092, 0x0092,
	0x0092, 0x0002, 0x0001, 0x0001, 0x00d3, 0x00d3, 0x00d3, 0x00d3, 0x00d3, 0x00d3,
	0x00d3, 0x00d3, 0x00d3, 0x00d3, 0x00d3, 0x00d3, 0x00d3, 0x00d3, 0x00d3, 0x00d3,
	0x00d3, 0x0003,
}

func loadBuf(name string, runes []rune) *buf.Buffer {
	wd, _ := os.Getwd()
	b, _ := buf.NewBuffer(wd, name, true, "\t")
	b.ReplaceFull(runes)
	return b
}

func printColors(b *buf.Buffer) {
	for i := 0; i < b.Size(); i++ {
		fmt.Printf("0x%04x, ", b.At(i).C)
	}
}

func testHighlightingEx(t *testing.T, b *buf.Buffer, cs []uint16, start int) {
	b.HlGood = start
	Highlight(b, b.Size())
	for i := 0; i < b.Size(); i++ {
		if b.At(i).C != cs[i] {
			t.Fatalf("Error at character %d (start %d) [%04x %04x]", i, start, b.At(i).C, cs[i])
		}
	}
}

func testHighlighting(t *testing.T, b *buf.Buffer, cs []uint16) {
	for start := -1; start < b.Size(); start++ {
		testHighlightingEx(t, b, cs, start)
	}
}

func TestGo(t *testing.T) {
	b := loadBuf("go.go", pgmGo)
	testHighlighting(t, b, pgmGoC)
}

func TestPy(t *testing.T) {
	b := loadBuf("py.py", pgmPy)
	testHighlighting(t, b, pgmPyC)
}
